<div id="modalWrap"> <!-- 모달 창을 감싸는 div -->
    <div id="modalBody">
        <span id="closeBtn">&times;</span> <!-- 모달을 닫는 X 버튼 -->
        <div id="modalData">

        </div>
    </div>
</div>
<style>


</style>
<!-- SHAKA PLAYER-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/shaka-player/3.2.1/shaka-player.compiled.js"></script>

<script>

    document.addEventListener('DOMContentLoaded', function () {
        const contents = document.querySelectorAll('.content');
        const modal = document.getElementById('modalWrap'); // 모달 창 요소 가져오기
        const closeBtn = document.getElementById('closeBtn'); // 모달을 닫는 버튼(X) 요소 가져오기
        const modalData = document.getElementById('modalData'); // 모달 내용 요소 가져오기
        document.addEventListener('fullscreenchange', onFullscreenChange);
        document.addEventListener('webkitfullscreenchange', onFullscreenChange); // Safari
        document.addEventListener('mozfullscreenchange', onFullscreenChange); // Firefox
        document.addEventListener('msfullscreenchange', onFullscreenChange); // IE/Edge

        contents.forEach(content => {
            ``
            content.addEventListener('click', function () {
                const contentId = this.dataset.contentId;
                console.log(`Content clicked: ${contentId}`); // 추가 로그

                showModal(contentId);
            });
        });

        closeBtn.onclick = function () {
            modal.style.display = "none"; // 모달을 닫는 버튼(X)을 클릭하면 모달을 숨김
            document.body.style.overflow = "auto";
        };

        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none"; // 모달 외부를 클릭하면 모달을 숨김
                document.body.style.overflow = "auto";
            }
        };

        function showModal(contentId) {
            modal.style.display = "block"; // 모달을 보이게 함
            document.body.style.overflow = "hidden";

            // AJAX 통신으로 데이터 가져오기
            fetch(`/api/content-info/${contentId}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        modalData.innerHTML = `
                    <div class="body-container">
                        <!-- 헤더 start -->
                        <div class="header-container">
                            <img src="${data.response.mainPhoto}" class="background-image"/>
                            <div class="play">
                                <div class="title">
                                    <img src="${data.response.textPhoto}" />
                                </div>
                                <div class="buttons">
                                    <a href="#" class="play-button playButton" data-filename="${data.response.videoPath}">▶ 재생</a>
                                    <button id="favoriteButton" class="icon">
                                        ${data.response.isFavorite ? '<i class="fa-solid fa-check"></i></i>' : '<i class="fa-solid fa-plus"></i>'}
                                    </button>
                                    <button id="likeButton" class="icon">
                                        ${data.response.isLike ? '<i class="fa-solid fa-thumbs-up"></i>' : '<i class="fa-regular fa-thumbs-up"></i>'}
                                    </button>
                                </div>
                            </div>
                        </div>
                        <!-- 헤더 end -->

                        <div class="containermargin">
                            <div class="container">
                                <div class="introduce">
                                    <div class="info">
                                        <span class="match">98% 일치</span>
                                        <span>${data.response.productYear}</span>
                                        <span>${data.response.playTime}</span>
                                        <span>HD</span>
                                    </div>
                                    <div class="metadata">
                                        <div><img src="${data.response.rateImg}" alt="" /></div>
                                    </div>
                                    <div class="description">
                                        ${data.response.introduction}
                                    </div>
                                </div>
                                <div class="details">
                                    <div class="cast">출연: ${data.response.actors}</div>
                                    <div class="genre">장르: ${data.response.genre} 영화</div>
                                    <div class="features">영화 특징: ${data.response.characteristics}</div>
                                </div>
                            </div>
                            <div class="container2">
                                <div class="title2">${data.response.title}상세 정보</div>
                                <div class="details2">
                                    <div>감독: ${data.response.director}</div>
                                    <div>출연: ${data.response.actors}</div>
                                    <div>각본: ${data.response.writers}</div>
                                    <div>장르: ${data.response.genre} 영화</div>
                                    <div>영화 특징: ${data.response.characteristics}</div>
                                    <div class="rating">
                                        <span>관람등급: <img src="${data.response.rateImg}" alt="" />${data.response.rate}</span>
                                    </div>
                                </div>
                            </div>
                            <div id="videoContainer"></div> <!-- 비디오를 동적으로 추가할 컨테이너 -->
                            <div id="qualityLevels"></div> <!-- 화질 선택 버튼을 표시할 영역 -->
                        </div>
                    </div>
                `;

                        // 찜하기/찜취소 버튼 클릭 이벤트 핸들러 추가
                        const favoriteButton = document.getElementById('favoriteButton');
                        favoriteButton.addEventListener('click', function () {
                            toggleFavorite(contentId, data.response.isFavorite, favoriteButton);
                        });

                        // 좋아요/좋아요취소 버튼 클릭 이벤트 핸들러 추가
                        const likeButton = document.getElementById('likeButton');
                        likeButton.addEventListener('click', function () {
                            $.ajax({
                                url: `/api/like-status/${contentId}`,
                                type: "GET",
                                contentType: 'application/json',
                            }).done((data) => {

                                toggleLike(data.response.contentId, data.response.isLiked, likeButton);

                            }).fail(function (xhr, status, error) {
                                console.error('Error fetching content info:', error);
                            });
                        });
                        // 비디오 재생 버튼 클릭 이벤트 리스너 추가
                        document.querySelector('.playButton').addEventListener('click', function (event) {
                            event.preventDefault(); // 앵커 태그의 기본 동작을 막습니다.
                            const filename = this.dataset.filename;
                            if (filename) {
                                const s3BaseUrl = 'https://ohflix-bucket.s3.ap-northeast-2.amazonaws.com/';
                                const videoUrl = `${s3BaseUrl}${filename}`;
                                loadVideo2(videoUrl);
                            } else {
                                alert('먼저 동영상을 업로드해주세요.');
                            }
                        });
                    })
                    .catch(error => {
                        modalData.innerText = 'Error loading data';
                        console.error('Error:', error);
                    });


            function toggleFavorite(contentId, isFavorite, favoriteButton) {
                const url = isFavorite ? `/api/users/${contentId}/unfavorite` : `/api/users/${contentId}/favorite`;
                fetch(url, {method: 'POST'})
                        .then(response => {
                            if (response.ok) {
                                // 찜 상태를 반대로 변경
                                const newIsFavorite = !isFavorite;
                                // 버튼 아이콘 업데이트
                                favoriteButton.innerHTML = newIsFavorite ? '<i class="fa-solid fa-check"></i></i>' : '<i class="fa-solid fa-plus"></i>';
                                // 다음 클릭 시의 상태를 업데이트
                                favoriteButton.onclick = function () {
                                    toggleFavorite(contentId, newIsFavorite, favoriteButton);
                                };
                            } else {
                                console.error('Failed to update favorite status');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
            }

            function toggleLike(contentId, isLike, likeButton) {
                const url = isLike ? `/api/users/${contentId}/dislike` : `/api/users/${contentId}/like`;
                fetch(url, {method: 'POST'})
                        .then(response => {
                            if (response.ok) {
                                return response.json(); // JSON 데이터를 반환하도록 함
                            } else {
                                throw new Error('Failed to update like status');
                            }
                        }).then(data => {
                    // JSON 데이터를 성공적으로 받았을 때 실행
                    const newIsLike = data.isLiked; // 서버 응답에서 새로운 좋아요 상태 가져오기
                    // 버튼 아이콘 업데이트
                    likeButton.innerHTML = newIsLike ? '<i class="fa-solid fa-thumbs-up"></i>' : '<i class="fa-regular fa-thumbs-up"></i>';
                    // 다음 클릭 시의 상태를 업데이트
                    likeButton.onclick = function () {
                        toggleLike(contentId, newIsLike, likeButton);
                    };
                })
                        .catch(error => {
                            console.error('Error:', error);
                        });
            }
        }


        document.addEventListener('DOMContentLoaded', initApp2);

        function initApp2() {
            // Install built-in polyfills to patch browser incompatibilities.
            shaka.polyfill.installAll();

            // Check if the browser supports the basic APIs Shaka needs.
            if (shaka.Player.isBrowserSupported()) {
                // Everything looks good!
                initPlayer2();
            } else {
                // This browser does not have the minimum set of APIs we need.
                console.error('Browser not supported!');
            }

            // 전체화면 모드 변경 이벤트 리스너 추가
            // document.addEventListener('fullscreenchange', onFullscreenChange);
            // document.addEventListener('webkitfullscreenchange', onFullscreenChange); // Safari
            // document.addEventListener('mozfullscreenchange', onFullscreenChange); // Firefox
            // document.addEventListener('MSFullscreenChange', onFullscreenChange); // IE/Edge

        }

        function initPlayer2() {
            // Listen for error events.
            window.addEventListener('error', onErrorEvent);
        }

        function createVideoElement() {
            const videoContainer = document.getElementById('videoContainer');
            videoContainer.innerHTML = ''; // 비디오 컨테이너를 초기화

            const video = document.createElement('video');
            video.id = 'videoPlayer';
            video.controls = true;
            video.autoplay = true;
            video.muted = false;

            videoContainer.appendChild(video);
            videoContainer.style.display = 'block'; // 비디오 컨테이너를 표시
            return video;
        }

        function loadVideo2(videoUrl) {
            console.log("Loading video from URL:", videoUrl); // 추가 로그

            const videoContainer = document.getElementById('videoContainer');
            const video = createVideoElement();
            const player = new shaka.Player(video);

            window.player = player;

            player.addEventListener('error', onErrorEvent);

            // 매니페스트를 로드합니다.
            try {
                player.load(videoUrl).then(function () {
                    console.log('The video has now been loaded!');
                    video.play();

                    // 비디오 재생 시작 시 전체화면 모드로 전환합니다.
                    if (!document.fullscreenElement) {
                        videoContainer.requestFullscreen().catch(err => {
                            console.log(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
                        });
                    }
                }).catch(function (error) {
                    console.error('Error during player.load:', error);
                    onError(error);
                });
            } catch (e) {
                console.error('Error during player.load try-catch:', e);
                onError(e);
            }
        }


        function onFullscreenChange() {
            console.log('Fullscreen change event triggered');
            const videoContainer = document.getElementById('videoContainer');
            if (!document.fullscreenElement && !document.webkitFullscreenElement && !document.mozFullScreenElement && !document.msFullscreenElement) {
                videoContainer.style.display = 'none'; // 전체화면에서 나가면 비디오 컨테이너를 숨깁니다.
                videoContainer.innerHTML = ''; // 비디오 요소를 제거합니다.
            }
        }

        function onErrorEvent(event) {
            // Extract the shaka.util.Error object from the event.
            onError(event.detail);
        }

        function onError(error) {
            // Log the error.
            // Log the error with additional information
            console.error('Error code', error.code, 'object', error);

            if (error.code === 7002) {
                console.error('Manifest loading error. Please check the manifest URL and CORS settings.');
            } else if (error.code === 7000) {
                console.error('Network request failure. Please check the network connection.');
            } else {
                console.error('An unknown error occurred.');
            }
        }
    });
</script>